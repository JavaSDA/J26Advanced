// 25 mins
Create a class called person:
- firstName
- lastName
- age

Encapsulate the person class such that once an
instance of it is created it cannot be changed but
values can be read from it.

Create another class called Employee:
- occupation
- employeeId

Ensure that the Employee class is a child class
to the Person class.


// 30 mins
Create an abstract class called Shape, and give it two abstract methods:
- getArea
- getPerimeter

Create 3 subclasses from the Shape class respectively: Circle, Square and Rectangle

Use a class with a main method to demonstrate the abstraction between shape and its child classes
as well as the operations of the getArea and getPerimeter methods.



// 30 mins
- Create an abstract class called Account add the following properties:
  - balance (double)
  - accountNumber (string)

  behaviours:
  - deposit()
  - withdraw()
  - getBalance()
  - getAccountNo()

 - Create 2 classes called Checking account and Savings Account.

 The savings account comes with the following extra features:
    - interestRate

   additional behaviour:
    - setInterestRate

   // 40mins

 - Create a class called Bank, it should have these properties
   - accounts(An array of Account objects)
   - numOfAccounts(counter to track how many accounts have been created) - int

   behaviours
   - addAccount(Account account)
   - findAccount(String accountNumber)
   - deposit(String accountNumber)
   - withdraw(String accountNumber)
   - getBalance(String accountNumber)

   HINT: For deposits, withdrawals and getBalance methods, you can use the findAccount method as
   a helper method.



   // 35 mins.
   // 18:55 - 19:30
   Create a class called Library and add the following fields to it:
   - books (An Array of Book objects)
   - numOfBooks (count how many books)

   behaviours:
   - add Book
   - searchBookById (Throw the NoBookFoundException if a book is not found)

   Create a class called Book and add the following properties to it:
   - id
   - title
   - author
   - yearOfRelease


   Create a class called NoBookFoundException that inherits from
   the RuntimeException class. The constructor of this exception should accept a
   String message parameter for user-friendliness.

   HINT: There is no need to add a cause parameter for the exception.






   // 30 mins.
   // 19:01 - 19:31
   Create a program to perform basic Arithmetic Mathematical
   operations(addition, subtraction, multiplication and division) using lambda expressions.

   - Create a functional interface called MathOperation as a SAM interface with the abstract method
   operate(double fNumber, double sNumber) - return double

   - In your class with your main method, Call the MathOperation interface for the
   different arithmetic operations and implement them as lambda expressions.

   - Bonus: Create a method in your Main Class that takes in two doubles as a parameter
   and a MathOperation parameter as well to calculate numbers based on the selected operation.

// 30 mins
// 18:13 - 18:43
Set
- Use the scanner class to accept 6 numbers from the user and
return them in a sorted manner, using the Set interface - TreeSet
- Use the same scanner object to accept 5 strings from the user and
filter the duplicates using a hashset
- Accept 4 names and use a set to return them in the order the user
entered them.

19:58 - 20:18 (20 mins)
// Redo or Transform the Zoo class from the animal package project and
// make sure that it uses a List(preferably an ArrayList instead of an array as
// it was before.


25 mins (17:42 - 18:07)
// Using a list, accept 5 integers from the user and print out
// the odd numbers and the even numbers (Please use a prompt)
// Enter a number:

// --- - Odd
// === - Even

// Odd numbers:
 ---
 ---
 ---
 ---

// Even Numbers:
===
===
===

35 mins
// 18:31 - 19:06

// Create a class called Person with the following properties:
- firstName
- lastName
- age

// Create a class called Employee as a subclass to the Person class with properties:
- occupation
- salary
- employeeId

// Create a class called Company with the following properties:
- companyName
- List<Employee> employees

Under the Company class implement the averageSalary() method that will
return the average salary of employees in a company.

Bonus: When testing in your main method, you can use the
scanner to create the employees if you'd prefer


// 30 mins
18:56 - 18:26
Using a map, create a program that takes in two strings, country(key)
and capital(value)
// Ex: How many countries do you want to enter?
// Enter country:
// Enter capital:

After storing the values, loop through the Map and print out the
countries and capital in this order
Output for each country in the map:
// The capital of ${country} is: ${capital}
// The capital of ${country} is: ${capital}
// The capital of ${country} is: ${capital}

40 mins + 15 mins
// 17:45 - 18:40
Write a Java program that simulates a phonebook. Your program
should utilize a Map object that stores the name and phone
number of each contact in the phonebook.

The program should have the following functionality:
- Add a new contact to the phonebook by entering a name and phone number
- Retrieve a contact's phone number by entering their name
- Print all the contacts in the phonebook

HINTS:
- use a Map<String, String>,
- use the scanner to receive input from the user.

SUGGESTIONS:
- To make retrieving a contact easier stick to using only one word for their names

45 mins
// 17:47 - 18:32
Create a program that simulates a student enrollment system.
This program should have the following classes:
- Student
Fields:
- id
- name
- major
- Collection of courses

- Course
Fields:
- name
- course code
- teacher's name
- collection of students offering this particular course.

- EnrollmentSystem
Fields:
- Collection of students
- Collection of courses

behaviours/methods:
- adding students or courses
- removing students or courses
- enroll a student in a course (decide on  a good name for the method)

It should also have the following enum, called Major
- This should contain the majors offered by the
system when a student is enrolling.
ex: COMPUTER_SCIENCE, BUSINESS

P.S Add a toString() method to each object except
the enum and the EnrollmentSystem class.

