// 25 mins
Create a class called person:
- firstName
- lastName
- age

Encapsulate the person class such that once an
instance of it is created it cannot be changed but
values can be read from it.

Create another class called Employee:
- occupation
- employeeId

Ensure that the Employee class is a child class
to the Person class.


// 30 mins
Create an abstract class called Shape, and give it two abstract methods:
- getArea
- getPerimeter

Create 3 subclasses from the Shape class respectively: Circle, Square and Rectangle

Use a class with a main method to demonstrate the abstraction between shape and its child classes
as well as the operations of the getArea and getPerimeter methods.



// 30 mins
- Create an abstract class called Account add the following properties:
  - balance (double)
  - accountNumber (string)

  behaviours:
  - deposit()
  - withdraw()
  - getBalance()
  - getAccountNo()

 - Create 2 classes called Checking account and Savings Account.

 The savings account comes with the following extra features:
    - interestRate

   additional behaviour:
    - setInterestRate

   // 40mins

 - Create a class called Bank, it should have these properties
   - accounts(An array of Account objects)
   - numOfAccounts(counter to track how many accounts have been created) - int

   behaviours
   - addAccount(Account account)
   - findAccount(String accountNumber)
   - deposit(String accountNumber)
   - withdraw(String accountNumber)
   - getBalance(String accountNumber)

   HINT: For deposits, withdrawals and getBalance methods, you can use the findAccount method as
   a helper method.



   // 35 mins.
   // 18:55 - 19:30
   Create a class called Library and add the following fields to it:
   - books (An Array of Book objects)
   - numOfBooks (count how many books)

   behaviours:
   - add Book
   - searchBookById (Throw the NoBookFoundException if a book is not found)

   Create a class called Book and add the following properties to it:
   - id
   - title
   - author
   - yearOfRelease


   Create a class called NoBookFoundException that inherits from
   the RuntimeException class. The constructor of this exception should accept a
   String message parameter for user-friendliness.

   HINT: There is no need to add a cause parameter for the exception.






   // 30 mins.
   Create a program to perform basic Arithmetic Mathematical operations(addition, subtraction, multiplication and
   division) using lambda expressions.

   - Create a functional interface called MathOperation as a SAM interface with the abstract method
   operation(double fNumber, double sNumber) - return double

   - In your class with your main method, Call the MathOperation interface for the different arithmetic operations
   and implement them as lambda expressions.

   - Bonus: Create a method in your Main Class that takes in two doubles as a parameter and a MathOperation parameter as well to
   calculate numbers based on the selected operation.




